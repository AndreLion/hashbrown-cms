{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Client/Routes/index.js","webpack:///./src/Client/Routes/content.js","webpack:///./src/Client/Routes/connections.js","webpack:///./src/Client/Routes/media.js","webpack:///./src/Client/Routes/schemas.js","webpack:///./src/Client/Routes/forms.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;AClFa;;AAEb,mBAAO,CAAC,EAAW;AACnB,mBAAO,CAAC,EAAe;AACvB,mBAAO,CAAC,EAAS;AACjB,mBAAO,CAAC,EAAW;AACnB,mBAAO,CAAC,EAAS;;;;;;;;;ACNJ;;AAEb;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+BAA+B;AACrD,8BAA8B,4DAA4D,EAAE;AAC5F,sBAAsB,+BAA+B;AACrD;AACA,sBAAsB,0FAA0F;AAChH;AACA;;AAEA;;AAEA,mE;AACA,iBAAiB;AACjB;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA,CAAC;;AAED;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA,SAAS;AACT,iGAAiG,2DAA2D,EAAE;;AAE9J;;AAEA,KAAK;AACL;;AAEA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,KAAK;AACL;;AAEA;AACA;;AAEA,KAAK;AACL;;AAEA;AACA,CAAC;;;;;;;;;;AC1FY;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+BAA+B;AACzD,kCAAkC,kEAAkE,EAAE;AACtG;AACA;AACA;;AAEA,KAAK;AACL;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;;AAEA,KAAK;AACL;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;;AAEA,KAAK;AACL;;AAEA;AACA,CAAC;;;;;;;;;ACxDY;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,+BAA+B;AACrD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA6B;AAC7B;;AAEA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA,CAAC;;;;;;;;;ACxCY;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA,SAAS;;AAET,KAAK;AACL;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;;AAEA,KAAK;AACL;;AAEA;AACA,CAAC;;;;;;;;;AC1FY;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+BAA+B;AACrD,8BAA8B,uDAAuD,EAAE;AACvF;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA,CAAC","file":"routes.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 26);\n","'use strict';\n\nrequire('./content');\nrequire('./connections');\nrequire('./media');\nrequire('./schemas');\nrequire('./forms');\n","'use strict';\n\n// Root reroute\nCrisp.Router.route('/', () => {\n    Crisp.Router.go('/content/');\n});\n\n// Dashboard\nCrisp.Router.route('/content/', () => {\n    Crisp.View.get('NavbarMain').showTab('/content/');\n\n    UI.setEditorSpaceContent(\n        [\n            _.h1('Content'),\n            _.p('Right click in the Content pane to create new Content.'),\n            _.p('Click on a Content node to edit it.'),\n            _.button({class: 'widget widget--button'}, 'New Content')\n                .click(() => { HashBrown.Views.Navigation.ContentPane.onClickNewContent(); }),\n            _.button({class: 'widget widget--button'}, 'Quick tour')\n                .click(HashBrown.Helpers.ContentHelper.startTour),\n            _.button({class: 'widget widget--button condensed', title: 'Click here to get some example content'}, 'Get example content')\n                .click(async () => {\n                    await HashBrown.Helpers.RequestHelper.request('post', 'content/example');\n\n                    await HashBrown.Helper.ResourceHelper.preloadAllResources();\n                \n                    HashBrown.Views.Navigation.NavbarMain.reload();  \n                })\n        ],\n        'text'\n    );\n});\n\n// Edit (JSON editor)\nCrisp.Router.route('/content/json/:id', () => {\n    Crisp.View.get('NavbarMain').highlightItem('/content/', Crisp.Router.params.id);\n    \n    let contentEditor = new HashBrown.Views.Editors.JSONEditor({\n        modelUrl: HashBrown.Helpers.RequestHelper.environmentUrl('content/' + Crisp.Router.params.id),\n        apiPath: 'content/' + Crisp.Router.params.id\n    });\n\n    UI.setEditorSpaceContent(contentEditor.$element);\n});\n\n// Edit (redirect to default tab)\nCrisp.Router.route('/content/:id', async () => {\n    let id = Crisp.Router.params.id;\n    \n    let content = await HashBrown.Helpers.ContentHelper.getContentById(id);\n    \n    if(content) {\n        let contentSchema = await HashBrown.Helpers.SchemaHelper.getSchemaById(content.schemaId);\n\n        if(contentSchema) {\n            location.hash = '/content/' + Crisp.Router.params.id + '/' + (contentSchema.defaultTabId || 'meta');\n        \n        } else {\n            UI.errorModal(new Error('Schema by id \"' + content.schemaId + '\" not found'), () => { location.hash = '/content/json/' + Crisp.Router.params.id; });\n\n        }\n    \n    } else {\n        UI.errorModal(new Error('Content by id \"' + Crisp.Router.params.id + '\" not found'));\n\n    }\n});\n\n// Edit (with tab specified)\nCrisp.Router.route('/content/:id/:tab', () => {\n    let id = Crisp.Router.params.id;\n\n    Crisp.View.get('NavbarMain').highlightItem('/content/', id);\n\n    let contentEditor = Crisp.View.get('ContentEditor');\n\n    if(!contentEditor) {\n        contentEditor = new HashBrown.Views.Editors.ContentEditor(id);\n        UI.setEditorSpaceContent(contentEditor.$element);\n   \n    } else if(!contentEditor.model || contentEditor.model.id !== id) {\n        contentEditor.remove();\n\n        contentEditor = new HashBrown.Views.Editors.ContentEditor(id);\n        UI.setEditorSpaceContent(contentEditor.$element);\n    \n    } else {\n        contentEditor.fetch();\n\n    }\n});\n\n","'use strict';\n\n// Dashboard\nCrisp.Router.route('/connections/', function() {\n    if(currentUserHasScope('connections')) {\n        Crisp.View.get('NavbarMain').showTab('/connections/');\n        \n        UI.setEditorSpaceContent(\n            [\n                _.h1('Connections'),\n                _.p('Right click in the Connections pane to create a new Connection.'),\n                _.p('Click on a Connection to edit it.'),\n                _.button({class: 'widget widget--button'}, 'New Connection')\n                    .click(() => { HashBrown.Views.Navigation.ConnectionPane.onClickNewConnection(); }),\n            ],\n            'text'\n        );\n    \n    } else {\n        location.hash = '/';\n\n    }\n});\n\n// Edit\nCrisp.Router.route('/connections/:id', function() {\n    if(currentUserHasScope('connections')) {\n        let connectionEditor = new HashBrown.Views.Editors.ConnectionEditor({\n            modelUrl: HashBrown.Helpers.RequestHelper.environmentUrl('connections/' + this.id)\n        });\n       \n        Crisp.View.get('NavbarMain').highlightItem('/connections/', this.id);\n        \n        UI.setEditorSpaceContent(connectionEditor.$element);\n    \n    } else {\n        location.hash = '/';\n\n    }\n});\n\n// Edit (JSON editor)\nCrisp.Router.route('/connections/json/:id', function() {\n    if(currentUserHasScope('connections')) {\n        let connectionEditor = new HashBrown.Views.Editors.JSONEditor({\n            apiPath: 'connections/' + this.id\n        });\n         \n        Crisp.View.get('NavbarMain').highlightItem('/connections/', this.id);\n        \n        UI.setEditorSpaceContent(connectionEditor.$element);\n    \n    } else {\n        location.hash = '/';\n\n    }\n});\n","'use strict';\n\n// Dashboard\nCrisp.Router.route('/media/', function() {\n    Crisp.View.get('NavbarMain').showTab('/media/');\n    \n    UI.setEditorSpaceContent(\n        [\n            _.h1('Media'),\n            _.p('Right click in the Media pane to upload, edit and sort Media items.'),\n            _.button({class: 'widget widget--button'}, 'Upload media')\n                .click(() => {\n                    new HashBrown.Views.Modals.MediaUploader({\n                        onSuccess: (ids) => {\n                            // We got one id back\n                            if(typeof ids === 'string') {\n                                location.hash = '/media/' + ids;\n\n                            // We got several ids back\n                            } else {\n                                location.hash = '/media/' + ids[0];\n                            \n                            }\n                        }\n                    });\n                })\n        ],\n        'text'\n    );\n});\n\n// Preview\nCrisp.Router.route('/media/:id', function() {\n    let mediaViewer = new HashBrown.Views.Editors.MediaViewer({\n        modelUrl: HashBrown.Helpers.RequestHelper.environmentUrl('media/' + this.id)\n    });\n    \n    Crisp.View.get('NavbarMain').highlightItem('/media/', this.id);\n    \n    UI.setEditorSpaceContent(mediaViewer.$element);\n});\n","'use strict';\n\n// Dashboard\nCrisp.Router.route('/schemas/', function() {\n    if(currentUserHasScope('schemas')) {\n        Crisp.View.get('NavbarMain').showTab('/schemas/');\n        \n        UI.setEditorSpaceContent(\n            [\n                _.h1('Schemas'),\n                _.p('Right click in the Schemas pane to create a new Schema.'),\n                _.p('Click on a Schema to edit it.')\n            ],\n            'text'\n        );\n    \n    } else {\n        location.hash = '/';\n\n    }\n});\n\n// Edit\nCrisp.Router.route('/schemas/:id', () => {\n    if(currentUserHasScope('schemas')) {\n        let schema;\n        let parentSchema;\n\n        Crisp.View.get('NavbarMain').highlightItem('/schemas/', Crisp.Router.params.id);\n       \n        // First get the Schema model\n        HashBrown.Helpers.SchemaHelper.getSchemaById(Crisp.Router.params.id)\n        .then((result) => {\n            schema = HashBrown.Helpers.SchemaHelper.getModel(result);\n\n            // Then get the parent Schema, if available\n            if(schema.parentSchemaId) {\n                return HashBrown.Helpers.SchemaHelper.getSchemaWithParentFields(schema.parentSchemaId);\n            }\n    \n            return Promise.resolve(null);\n        })\n        .then((result) => {\n            if(result) {\n                parentSchema = HashBrown.Helpers.SchemaHelper.getModel(result);\n            }\n\n            let schemaEditor;\n\n            if(schema instanceof HashBrown.Models.ContentSchema) {\n                schemaEditor = new HashBrown.Views.Editors.ContentSchemaEditor({\n                    model: schema,\n                    parentSchema: parentSchema\n                });\n            } else {\n                schemaEditor = new HashBrown.Views.Editors.FieldSchemaEditor({\n                    model: schema,\n                    parentSchema: parentSchema\n                });\n            }\n            \n            UI.setEditorSpaceContent(schemaEditor.$element);\n        });\n            \n    } else {\n        location.hash = '/';\n\n    }\n});\n\n// Edit (JSON editor)\nCrisp.Router.route('/schemas/json/:id', function() {\n    if(currentUserHasScope('schemas')) {\n        let jsonEditor = new HashBrown.Views.Editors.JSONEditor({\n            modelUrl: HashBrown.Helpers.RequestHelper.environmentUrl('schemas/' + this.id),\n            apiPath: 'schemas/' + this.id,\n            onSuccess: () => {\n                let navbar = Crisp.View.get('NavbarMain');\n                navbar.reload();\n            }\n        });\n\n        Crisp.View.get('NavbarMain').highlightItem('/schemas/', this.id);\n        \n        UI.setEditorSpaceContent(jsonEditor.$element);\n    \n    } else {\n        location.hash = '/';\n\n    }\n});\n","'use strict';\n\n// Dashboard\nCrisp.Router.route('/forms/', function() {\n    Crisp.View.get('NavbarMain').showTab('/forms/');\n    \n    UI.setEditorSpaceContent(\n        [\n            _.h1('Forms'),\n            _.p('Right click in the Forms pane to create a new Form.'),\n            _.p('Click on a Form to edit it.'),\n            _.button({class: 'widget widget--button'}, 'New Form')\n                .click(() => { HashBrown.Views.Navigation.FormsPane.onClickNewForm(); }),\n        ],\n        'text'\n    );\n});\n\n// Edit\nCrisp.Router.route('/forms/:id', function() {\n    Crisp.View.get('NavbarMain').highlightItem('/forms/', this.id);\n    \n    let formEditor = new HashBrown.Views.Editors.FormEditor({\n        modelUrl: HashBrown.Helpers.RequestHelper.environmentUrl('forms/' + this.id)\n    });\n   \n    UI.setEditorSpaceContent(formEditor.$element);\n});\n\n// Edit (JSON editor)\nCrisp.Router.route('/forms/json/:id', function() {\n    let formEditor = new HashBrown.Views.Editors.JSONEditor({\n        modelUrl: HashBrown.Helpers.RequestHelper.environmentUrl('forms/' + this.id),\n        apiPath: 'forms/' + this.id\n    });\n     \n    Crisp.View.get('NavbarMain').highlightItem('/forms/', this.id);\n    \n    UI.setEditorSpaceContent(formEditor.$element);\n});\n"],"sourceRoot":""}