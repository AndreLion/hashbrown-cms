{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Client/demo.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;AClFa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM,uM;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,iCAAiC;AACjC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,mBAAO,CAAC,CAAyC;AACpF,4BAA4B,mBAAO,CAAC,CAAkC;AACtE,6BAA6B,mBAAO,CAAC,CAAiC;AACtE,+BAA+B,mBAAO,CAAC,EAAmC;AAC1E,wCAAwC,mBAAO,CAAC,EAA4C;AAC5F,8CAA8C,mBAAO,CAAC,EAAkD;AACxG,4BAA4B,mBAAO,CAAC,EAAgC;AACpE,gCAAgC,mBAAO,CAAC,EAAoC;AAC5E,iCAAiC,mBAAO,CAAC,EAAqC;AAC9E,gCAAgC,mBAAO,CAAC,EAAoC;AAC5E,sCAAsC,mBAAO,CAAC,EAA0C;AACxF,8BAA8B,mBAAO,CAAC,EAAkC;AACxE,yCAAyC,mBAAO,CAAC,EAA6C;AAC9F,gCAAgC,mBAAO,CAAC,EAAoC;AAC5E,8BAA8B,mBAAO,CAAC,EAAkC;AACxE,8BAA8B,mBAAO,CAAC,EAAkC;AACxE,4BAA4B,mBAAO,CAAC,EAAgC;AACpE,2BAA2B,mBAAO,CAAC,EAA+B;AAClE;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;;AAEjB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc,wEAAwE;AACtF;AACA;AACA,wB;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;;AAEA;AACA,aAAa;;AAEb;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,e;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT,KAAK;AACL","file":"demo.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","'use strict';\n\n/**\n * Demo API\n *\n * @memberof HashBrown.Client\n */\nclass DemoApi {\n    /**\n     * Clears the cache\n     */\n    static reset() {\n        localStorage.setItem('demo', null);\n\n        location.hash = '/content/';\n        location.reload();\n    }\n\n    /**\n     * Gets the fake API cache\n     */\n    static getCache(resource, id) {\n        let cache = this.cache;\n        \n        if(!cache) {\n            try {\n                cache = localStorage.getItem('demo') || '{}';\n                cache = JSON.parse(cache);\n            } catch(e) {\n                cache = {};\n            }\n            \n            cache = cache || {};\n        }\n\n        this.cache = cache;\n\n        if(!resource) {\n            return cache;\n        }\n\n        if(!cache[resource] || !Array.isArray(cache[resource])) {\n            cache[resource] = DemoApi.getNativeResource(resource) || [];\n        }\n\n        if(!id) {\n            return cache[resource];\n        }\n\n        for(let i in cache[resource]) {\n            if(cache[resource][i].id === id || cache[resource][i].name === id) {\n                return cache[resource][i];\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Sets the fake API\n     */\n    static setCache(resource, id, data) {\n        let cache = DemoApi.getCache();\n\n        if(!cache[resource] || !Array.isArray(cache[resource])) {\n            cache[resource] = DemoApi.getNativeResource(resource) || [];\n        }\n\n        let foundExisting = false;\n\n        for(let i in cache[resource]) {\n            if(cache[resource][i].id == id) {\n                // Update data\n                if(data) {\n                    cache[resource][i] = data;\n\n                // Delete data\n                } else {\n                    cache[resource].splice(i, 1);\n                }\n\n                foundExisting = true;\n                \n                break;\n            }\n        }\n\n        if(!foundExisting && data) {\n            cache[resource].push(data);\n        }\n\n        localStorage.setItem('demo', JSON.stringify(cache));\n\n        return data;\n    }\n\n    /**\n     * Request\n     */\n    static request(method, url, data) {\n        url = url.replace('/api/demo/live/', '');\n        method = method.toUpperCase();\n\n        debug.log(method + ' ' + url, DemoApi);\n\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                resolve(DemoApi.requestSync(method, url, data));\n            }, 100);\n        });\n    }\n\n    static requestSync(method, url, data) {\n        url = url.replace('/api/demo/live/', '');\n        method = method.toUpperCase();\n        \n        debug.log(method + ' ' + url, DemoApi);\n        \n        switch(method) {\n            case 'GET':\n                return DemoApi.get(url);\n\n            case 'POST':\n                return DemoApi.post(url, data);\n\n            case 'DELETE':\n                return DemoApi.delete(url);\n        }\n\n        return data;\n    }\n\n    /**\n     * Parses a resource url\n     */\n    static parseUrl(url) {\n        let query = {};\n        let split = url.split('/');\n\n        query.resource = split[0];\n        query.params = url.split('?')[1];\n\n        if(split.length > 1) {\n            query.id = split[1].replace('?' + query.params, '');\n        }\n\n        return query;\n    }\n\n    /**\n     * Delete\n     */\n    static delete(url) {\n        let query = DemoApi.parseUrl(url);\n\n        return DemoApi.setCache(query.resource, query.id, null);\n    }\n\n    /**\n     * Get\n     */\n    static get(url) {\n        let query = DemoApi.parseUrl(url);\n\n        return DemoApi.getCache(query.resource, query.id);\n    }\n\n    /**\n     * Post\n     */\n    static post(url, data) {\n        let query = DemoApi.parseUrl(url);\n\n        // Publish\n        if(url == 'content/publish' || url == 'content/unpublish' || url == 'content/preview') {\n            return Promise.resolve();\n        }\n\n        // Create new\n        if(url.indexOf('content/new') > -1) {\n            let schemaId = url.match(/content\\/new\\/([a-zA-Z0-9]+)/);\n\n            if(!schemaId) {\n                throw new Error('No Schema id specified');\n            }\n\n            schemaId = schemaId[1];\n\n            let sort = url.match(/\\?sort=([0-9]*)/);\n\n            if(sort) {\n                sort = sort[2];\n            }\n            \n            let parentId = url.match(/\\&parent=([0-9a-z]*)/);\n\n            if(parentId) {\n                parentId = parentId[1];\n            }\n\n            data = HashBrown.Models.Content.create(schemaId);\n                \n            data.parentId = parentId;\n            data.sort = sort;\n\n            query = {\n                resource: 'content',\n                id: data.id\n            };\n        }\n\n        console.log('--- POST data:', data);\n\n        return DemoApi.setCache(query.resource, query.id, data);\n    }\n\n    /**\n     * Gets a native resource\n     */\n    static getNativeResource(type) {\n        switch(type) {\n            case 'users':\n                return [\n                    {\n                        id: '4173f094621d4a882f912ccaf1cc6613a386519e',\n                        isAdmin: true,\n                        isCurrent: true,\n                        username: 'demouser',\n                        fullName: 'Demo User',\n                        email: 'demo@user.com',\n                        scopes: {}\n                    }\n                ];\n\n            case 'settings':\n                return [\n                    {\n                        id: 'providers',\n                        media: '8c75aa0739cf66bcac269f01ab9007e666bd941b'\n                    }\n                ];\n\n            case 'media':\n                return [\n\t\t\t\t\t{\"id\":\"50d05eee9088c589bfd5a5a3a3043c0ebcc4972b\",\"remote\":true,\"icon\":\"file-image-o\",\"name\":\"banner.jpg\",\"url\":\"media/50d05eee9088c589bfd5a5a3a3043c0ebcc4972b/banner-flat-pink.jpg\",\"folder\":\"banners\"} \n                ];\n\n            case 'connections':\n                return [\n                    {\n                        id: '8c75aa0739cf66bcac269f01ab9007e666bd941b',\n                        title: 'My website',\n                        url: 'example.com',\n                        locked: true\n                    }\n                ];\n\n            case 'content':\n                return [\n                    {\n                        \"locked\": false,\n                        \"local\": false,\n                        \"remote\": false,\n                        \"id\": \"91f1ec2b984f291377c2dc488be2ebbefb46dd9a\",\n                        \"parentId\": \"\",\n                        \"createdBy\": \"4173f094621d4a882f912ccaf1cc6613a386519e\",\n                        \"updatedBy\": \"4173f094621d4a882f912ccaf1cc6613a386519e\",\n                        \"createDate\": \"2016-09-05T06:52:17.646Z\",\n                        \"updateDate\": \"2017-08-03T15:55:10.590Z\",\n                        \"publishOn\": null,\n                        \"unpublishOn\": null,\n                        \"schemaId\": \"591a897ad572cadae5115ef05726d9ead2725dc5\",\n                        \"isPublished\": true,\n                        \"hasPreview\": false,\n                        \"sort\": -1,\n                        \"properties\": {\n                            \"title\": \"HashBrown CMS\",\n                            \"url\": \"/\",\n                            \"sections\": [\n                                {\n                                    \"value\": {\n                                        \"image\": \"50d05eee9088c589bfd5a5a3a3043c0ebcc4972b\",\n                                        \"text\": \"## HashBrown CMS\\n\\nCreate once. Publish anywhere.\" \n                                    },\n                                    \"schemaId\": \"f5c4cf4dffb088a2753760ad1da9cd64ff781003\"\n                                },\n                                {\n                                    \"value\": {\n                                        \"text\": \"## Why HashBrown?\\n\\n### Remote management\\n\\nSeparate your concerns with a truly modern approach to content management. Your websites won't know what hit them.\\n\\n### Multiple projects at once\\n\\nWhy worry about several CMS'es, when you only need one?\\n\\n### Several environments for each project\\n\\nWe get it. You need to test your content before you go live.\\n\\n### Multilingual\\n\\nRemember the last time you used a truly elegant localisation solution in a CMS? We don't either.\\n\\n### Plugin support\\n\\nIf your needs aren't met at the core level, you can add anything you can imagine.\\n\\n### Content format consistency\\n\\nWhen you are passing complex, format-agnostic data around, document databases are the way to go. HashBrown knows what's up.\\n\\n### Painless backups\\n\\nHashBrown has your back in seconds.\\n\\n### Small footprint\\n\\nYou could probably run HashBrown on your toaster at home.\"\n                                    },\n                                    \"schemaId\": \"904e8e7570ddb37ea1f31d210db47cd15f92ff92\"\n                                }\n                            ],\n                            \"description\": \"Create once. Publish anywhere.\"\n                        },\n                        \"settings\": {\n                            \"publishing\": {\n                                \"connectionId\": \"8c75aa0739cf66bcac269f01ab9007e666bd941b\",\n                                \"applyToChildren\": true\n                            }\n                        }\n                    }\n                ];\n\n            case 'schemas':\n                let schemas = {\n                    'contentBase': require('Common/Schemas/Content/contentBase.json'),\n                    'page': require('Common/Schemas/Content/page.json'),\n                    'array': require('Common/Schemas/Field/array.json'),\n                    'boolean': require('Common/Schemas/Field/boolean.json'),\n                    'contentReference': require('Common/Schemas/Field/contentReference.json'),\n                    'contentSchemaReference': require('Common/Schemas/Field/contentSchemaReference.json'),\n                    'date': require('Common/Schemas/Field/date.json'),\n                    'dropdown': require('Common/Schemas/Field/dropdown.json'),\n                    'fieldBase': require('Common/Schemas/Field/fieldBase.json'),\n                    'language': require('Common/Schemas/Field/language.json'),\n                    'mediaReference': require('Common/Schemas/Field/mediaReference.json'),\n                    'number': require('Common/Schemas/Field/number.json'),\n                    'resourceReference': require('Common/Schemas/Field/resourceReference.json'),\n                    'richText': require('Common/Schemas/Field/richText.json'),\n                    'string': require('Common/Schemas/Field/string.json'),\n                    'struct': require('Common/Schemas/Field/struct.json'),\n                    'tags': require('Common/Schemas/Field/tags.json'),\n                    'url': require('Common/Schemas/Field/url.json'),\n                };\n       \n                let result = [];\n\n                for(let k in schemas) {\n                    schemas[k].id = k;\n\n                    if(k === 'contentBase' || k === 'page' || schemas[k].type == 'content') {\n                        schemas[k].type = 'content';\n                    } else {\n                        schemas[k].type = 'field';\n                    }\n\n                    if(schemas[k].isLocked !== false) {\n                        schemas[k].isLocked = true;\n                    }\n\n                    result.push(HashBrown.Helpers.SchemaHelper.getModel(schemas[k]));\n                }\n\n                // Section page\n                result.push(new HashBrown.Models.ContentSchema({\n                    \"isLocked\": false,\n                    \"sync\": {\n                        \"hasRemote\": false,\n                        \"isRemote\": false\n                    },\n                    \"id\": \"591a897ad572cadae5115ef05726d9ead2725dc5\",\n                    \"name\": \"Section Page\",\n                    \"icon\": \"file\",\n                    \"parentSchemaId\": \"page\",\n                    \"hiddenProperties\": [],\n                    \"defaultTabId\": \"content\",\n                    \"tabs\": {},\n                    \"fields\": {\n                        \"properties\": {\n                            \"sections\": {\n                                \"tabId\": \"content\",\n                                \"label\": \"Sections\",\n                                \"tabId\": \"content\",\n                                \"schemaId\": \"array\",\n                                \"config\": {\n                                    \"allowedSchemas\": [\"904e8e7570ddb37ea1f31d210db47cd15f92ff92\", \"f5c4cf4dffb088a2753760ad1da9cd64ff781003\"]\n                                }\n                            }\n                        }\n                    },\n                    \"allowedChildSchemas\": [\"591a897ad572cadae5115ef05726d9ead2725dc5\"],\n                    \"type\": \"content\"\n                }));\n\n                // Section\n                result.push(new HashBrown.Models.FieldSchema({\n                    \"isLocked\": false,\n                    \"sync\": {\n                        \"hasRemote\": false,\n                        \"isRemote\": false\n                    },\n                    \"local\": false,\n                    \"remote\": false,\n                    \"id\": \"7ccbf2d613a4da3e5543abdde33b9eb0e5fbb8f3\",\n                    \"name\": \"Section\",\n                    \"icon\": \"file\",\n                    \"parentSchemaId\": \"struct\",\n                    \"hiddenProperties\": [],\n                    \"editorId\": \"struct\",\n                    \"type\": \"field\"\n                }));\n\n                // Rich text section\n                result.push(new HashBrown.Models.FieldSchema({\n                    \"isLocked\": false,\n                    \"sync\": {\n                        \"hasRemote\": false,\n                        \"isRemote\": false\n                    },\n                    \"id\": \"904e8e7570ddb37ea1f31d210db47cd15f92ff92\",\n                    \"name\": \"Rich Text Section\",\n                    \"icon\": \"file-text-o\",\n                    \"parentSchemaId\": \"7ccbf2d613a4da3e5543abdde33b9eb0e5fbb8f3\",\n                    \"hiddenProperties\": [],\n                    \"editorId\": \"struct\",\n                    \"config\": {\n                        \"struct\": {\n                            \"text\": {\n                                \"label\": \"Text\",\n                                \"tabId\": \"content\",\n                                \"schemaId\": \"richText\"\n                            }\n                        }\n                    },\n                    \"type\": \"field\"\n                }));\n\n                // Hero\n                result.push(new HashBrown.Models.FieldSchema({\n                    \"isLocked\": false,\n                    \"sync\": {\n                        \"hasRemote\": false,\n                        \"isRemote\": false\n                    },\n                    \"id\": \"f5c4cf4dffb088a2753760ad1da9cd64ff781003\",\n                    \"name\": \"Hero Section\",\n                    \"icon\": \"image\",\n                    \"parentSchemaId\": \"7ccbf2d613a4da3e5543abdde33b9eb0e5fbb8f3\",\n                    \"hiddenProperties\": [],\n                    \"editorId\": \"struct\",\n                    \"config\": {\n                        \"struct\": {\n                            \"image\": {\n                                \"label\": \"Image\",\n                                \"schemaId\": \"mediaReference\"\n                            },\n                            \"text\": {\n                                \"label\": \"Text\",\n                                \"schemaId\": \"richText\"\n                            }\n                        }\n                    },\n                    \"type\": \"field\"\n                }));\n\n                return result;\n\n            default:\n                return [];\n        }\n    }\n}\n\nHashBrown.DemoApi = DemoApi;\n\n// Add reset button\n_.append(document.body, \n    _.button({class: 'widget widget--button condensed page--environment__demo__reset'},\n        'Reset demo'\n    ).click(() => {\n        DemoApi.reset();               \n    })\n);\n\n// Override normal api call\nHashBrown.Helpers.RequestHelper.request = DemoApi.request;\nHashBrown.Helpers.RequestHelper.customRequest = DemoApi.request;\n\n// ----------\n// Debug socket\n// ----------\ndebug.startSocket = () => {}\n\n// ----------\n// SchemaHelper\n// ----------\nHashBrown.Helpers.SchemaHelper.getSchemaWithParentFields = (id) => {\n    let schema = HashBrown.Helpers.SchemaHelper.getSchemaByIdSync(id);\n\n    if(schema.parentSchemaId) {\n        return HashBrown.Helpers.SchemaHelper.getSchemaWithParentFields(schema.parentSchemaId)\n        .then((parentSchema) => {\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    let mergedSchema = HashBrown.Helpers.SchemaHelper.mergeSchemas(schema, parentSchema);\n\n                    resolve(mergedSchema);\n                }, 100);\n            });\n        });\n    } else {\n        return Promise.resolve(schema);\n    }\n};\n\n// ----------\n// Crisp UI\n// ----------\nCrisp.View.prototype.fetch = function fetch() {\n    let view = this;\n\n    function getModel() {\n        // Get model from URL\n        if(!view.model && typeof view.modelUrl === 'string') {\n            view.model = DemoApi.requestSync('get', view.modelUrl);\n            view._init();\n        \n        // Get model with function\n        } else if(!view.model && typeof view.modelFunction === 'function') {\n            view.modelFunction(function(data) {\n                view.model = data;\n\n                view._init();\n            });\n\n        // Just perform the initialisation\n        } else {\n            view._init();\n        }\n    }\n\n    // Get the model\n    getModel();    \n}\n\n// ----------\n// Resource loading\n// ----------\nHashBrown.Helpers.RequestHelper.reloadResource = function reloadResource(name) {\n    let model = null;\n    let result = HashBrown.DemoApi.requestSync('get', name);\n    \n    switch(name) {\n        case 'content':\n            model = HashBrown.Models.Content;\n            break;\n\n        case 'users':\n            model = HashBrown.Models.User;\n            break;\n\n        case 'media':\n            model = HashBrown.Models.Media;\n            break;\n\n        case 'connections':\n            model = HashBrown.Models.Connection;\n            break;\n\n        case 'schemas':\n            break;\n    }\n\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            window.resources[name] = result;\n\n            // If a model is specified, use it to initialise every resource\n            if(model) {\n                for(let i in window.resources[name]) {\n                    window.resources[name][i] = new model(window.resources[name][i]);\n                }\n            }\n\n            resolve(result);\n        }, 100);\n    });\n};\n"],"sourceRoot":""}