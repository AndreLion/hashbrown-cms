{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Client/dashboard.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;AClFa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,QAAQ;;AAEvC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB,qCAAqC;AAC5D;AACA;AACA;AACA;AACA,2C;AACA,yFAAyF,cAAc;;AAEvG;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA,2EAA2E,+DAA+D;;AAE1I;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB,0BAA0B,qCAAqC;AAC/D;AACA;AACA,2BAA2B,qCAAqC;AAChE;AACA,oCAAoC,2DAA2D;AAC/F;AACA;AACA;AACA,oCAAoC,sDAAsD;AAC1F;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,+BAA+B;AAC1D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8CAA8C,QAAQ;;AAEtD;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,SAAS;;AAET,KAAK;AACL;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,+BAA+B,QAAQ;;AAEvC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,YAAY;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4CAA4C,yBAAyB,6BAA6B,IAAI,QAAQ,IAAI,QAAQ,IAAI,QAAQ,IAAI,gCAAgC,GAAG;AAC7K;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kHAAkH,kBAAkB;;AAEpI;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,qBAAqB;;AAErB;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,sBAAsB;AACzC,yBAAyB,8BAA8B;AACvD,mCAAmC,4BAA4B,GAAG,iHAAiH;AACnL;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB,+HAA+H,mBAAmB,EAAE;AACpJ;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC,mBAAmB,8BAA8B;AACjD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C,qBAAqB,8BAA8B;AACnD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sGAAsG,aAAa;;AAEnH;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC","file":"dashboard.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","'use strict';\n\n/**\n * Initialises the project views\n */\nasync function initProjects() {\n    // Add project\n    $('.page--dashboard__projects__add').click(onClickAddProject);\n\n    // Fetch projects\n    let projectIds = await HashBrown.Helpers.RequestHelper.request('get', 'server/projects?ids=true');\n   \n    $('.page--dashboard__projects__list').empty();\n\n    for(let projectId of projectIds || []) {\n        let projectEditor = new HashBrown.Views.Dashboard.ProjectEditor({\n            modelId: projectId\n        });\n\n        $('.page--dashboard__projects__list').prepend(projectEditor.$element);\n    }\n}\n\n/**\n * Initialises the user views\n */\nasync function initUsers() {\n    if(!currentUserIsAdmin()) { return; }\n\n    // Invite user\n    $('.page--dashboard__users__add').click(onClickInviteUser);\n\n    // Get users\n    let users = await HashBrown.Helpers.RequestHelper.request('get', 'users');\n    \n    for(let user of users || []) {\n        user = new HashBrown.Models.User(user);\n\n        let $user;\n        let $projectList;\n\n        let renderUser = () => {\n            _.append($user.empty(),\n                _.div({class: 'page--dashboard__user__body'},\n                    new HashBrown.Views.Widgets.Dropdown({\n                        icon: 'ellipsis-v',\n                        reverseKeys: true,\n                        options: {\n                            'Edit': () => { \n                                let userEditor = new HashBrown.Views.Editors.UserEditor({ model: user });\n\n                                userEditor.on('save', () => {\n                                    renderUser();\n                                });\n                            },\n                            'Delete': () => {\n                                if(user.id === HashBrown.Context.user.id) { return UI.errorModal(new Error('You cannot delete yourself')); }\n                                \n                                UI.confirmModal(\n                                    'remove',\n                                    'Delete user \"' + (user.fullName || user.username || user.email || user.id) + '\"',\n                                    'Are you sure you want to remove this user?',\n                                    async () => {\n                                        await HashBrown.Helpers.ResourceHelper.remove('users', user.id);\n\n                                        $user.remove();\n                                    }\n                                );\n                            },\n                        }\n                    }).$element.addClass('page--dashboard__user__menu'),\n                    _.h3({class: 'page--dashboard__user__name'},\n                        (user.fullName || user.username || user.email || user.id) + (user.id == HashBrown.Context.user.id ? ' (you)' : '')\n                    ),\n                    _.div({class: 'page--dashboard__user__type'},\n                        _.if(user.isAdmin,\n                            _.span({class: 'page--dashboard__user__type__icon fa fa-black-tie'}),\n                            'Admin'\n                        ),\n                        _.if(!user.isAdmin,\n                            _.span({class: 'page--dashboard__user__type__icon fa fa-user'}),\n                            'Editor'\n                        )\n                    )\n                )\n            );\n        };\n\n        $('.page--dashboard__users__list').append(\n            $user = _.div({class: 'page--dashboard__user'})\n        );\n\n        renderUser();\n    }\n}\n\n/**\n * Init server view\n */\nasync function initServer() {\n    if(!currentUserIsAdmin() || !$btnUpdate) { return; }\n\n    // Restart server\n    $('.page--dashboard__restart').click(onClickRestart);\n    \n    // Check for updates\n    let $btnUpdate = _.find('.page--dashboard__update');\n    \n    let update = await HashBrown.Helpers.RequestHelper.request('get', 'server/update/check');\n    $btnUpdate.removeClass('working');\n\n    if(update.isBehind) {\n        $btnUpdate.attr('title', 'Update is available (' + update.remoteVersion + ')');\n\n        $btnUpdate.click(async () => {\n            UI.messageModal('Update', 'HashBrown is upgrading from ' + update.localVersion + ' to ' + update.remoteVersion + ' (this may take a minute)...', false);\n\n            await HashBrown.Helpers.RequestHelper.request('post', 'server/update/start');\n            \n            UI.messageModal('Success', 'HashBrown is restarting...', false);\n\n            HashBrown.Helpers.RequestHelper.listenForRestart();\n        })\n\n    } else {\n        $btnUpdate.attr('disabled', true);\n        $btnUpdate.addClass('disabled');\n        $btnUpdate.attr('title', 'HashBrown is up to date');\n    }\n}\n\n\n/**\n * Event: Click restart\n */\nasync function onClickRestart() {\n    if(!currentUserIsAdmin()) { return; }\n    \n    await HashBrown.Helpers.RequestHelper.request('post', 'server/restart');\n\n    HashBrown.Helpers.RequestHelper.listenForRestart();\n}\n\n/**\n * Event: Click invite user\n */\nasync function onClickInviteUser() {\n    let users = await HashBrown.Helpers.RequestHelper.customRequest('get', '/api/users');\n\n    /**\n     * Generate password\n     */\n    function generatePassword() {\n        var length = 8,\n        charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\",\n        retVal = \"\";\n        for (var i = 0, n = charset.length; i < length; ++i) {\n            retVal += charset.charAt(Math.floor(Math.random() * n));\n        }\n        return retVal;\n    }\n\n    /**\n     * Event: On submit user changes\n     */\n    function onSubmit() {\n        let username = addUserModal.$element.find('input').val();\n        let currentUsername = HashBrown.Context.user.fullName || HashBrown.Context.user.username;\n\n        // Check if username was email\n        let emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        let isEmail = emailRegex.test(username);\n\n        // Check if en existing user has the same information\n        let existingUser = users.filter((user) => {\n            return user.username == username || user.email == username;\n        })[0];\n\n        // The user was found\n        if(existingUser) {\n            UI.errorModal(new Error('User \"' + username + '\" already exists'));\n            return;\n        }\n\n        // An email was provided, send invitation\n        if(isEmail) {\n            let modal = UI.confirmModal(\n                'invite',\n                'Add user',\n                'Do you want to invite a new user with email \"' + username + '\"?',\n                async () => {\n                    let token = await HashBrown.Helpers.RequestHelper.customRequest('post', '/api/users/invite', { email: username });\n\n                    let subject = 'Invitation to HashBrown';\n                    let url = location.protocol + '//' + location.host + '/login?inviteToken=' + token;\n                    let body = 'You have been invited by ' + currentUsername + ' to join a HashBrown instance.%0D%0APlease go to this URL to activate your account: %0D%0A' + url;\n                    let href = 'mailto:' + username + '?subject=' + subject + '&body=' + body;\n\n                    location.href = href;\n\n                    UI.messageModal('Created invitation for \"' + username + '\"', 'Make sure to send the new user this link: <a href=\"' + url + '\">' + url + '</a>', () => {\n                        location.reload();\n                    });\n\n                    let $buttons = modal.$element.find('button').attr('disabled', true).addClass('disabled');\n\n                    return false;\n                }\n            );\n\n            return;\n        }\n\n        // User doesn't exist, create it\n        let $passwd;\n\n        let modal = UI.messageModal(\n            'Add user',\n            _.div({class: 'widget-group'},\n                _.label({class: 'widget widget--label'}, 'Password for new user \"' + username + '\"'),\n                $passwd = _.input({required: true, pattern: '.{6,}', class: 'widget widget--input text', type: 'text', value: generatePassword(), placeholder: 'Type new password'})\n            ),\n            async () => {\n                let password = $passwd.val() || '';\n                let scopes = {};\n\n                UI.messageModal('Creating user', 'Creating user \"' + username + '\"...');\n\n                await HashBrown.Helpers.ResourceHelper.new('users', '', {\n                    username: username,\n                    password: password,\n                    scopes: {}\n                });\n\n                UI.messageModal('Create user', 'User \"' + username + '\" was created with password \"' + password + '\".', () => { location.reload(); });\n            }\n        );\n    }\n\n    // Renders the modal\n    let addUserModal = UI.messageModal(\n        'Add user',\n        _.div({class: 'widget-group'},\n            _.div({class: 'widget widget--label'}, 'Username or email'),\n            new HashBrown.Views.Widgets.Input({\n                placeholder: 'Input username or email'\n            }).$element\n        ),\n        onSubmit\n    );\n}\n\n/**\n * Event: Click create project\n */\nasync function onClickAddProject() {\n    let modal = new HashBrown.Views.Modals.Modal({\n        title: 'Create new project',\n        body: _.div({class: 'widget-group'},\n            _.label({class: 'widget widget--label'}, 'Project name'),\n            new HashBrown.Views.Widgets.Input({\n                placeholder: 'example.com'\n            }).$element\n        ),\n        actions: [\n            {\n                label: 'Create',\n                onClick: async (e) => {\n                    let name = modal.$element.find('input').val();\n\n                    if(name) {\n                        await HashBrown.Helpers.RequestHelper.request('post', 'server/projects/new', { name: name });\n                            \n                        location.reload();\n                    }\n\n                    return false;\n                }\n            }\n        ]\n    });\n}\n\n/**\n * Event: Document ready\n */\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Check for required submodules\n    submoduleCheck();\n\n    // Libraries\n    window._ = Crisp.Elements;\n\n    // Helper shortcuts\n    window.debug = HashBrown.Helpers.DebugHelper;\n    window.UI = HashBrown.Helpers.UIHelper;\n\n    // Error handling\n    window.onerror = UI.errorModal;\n\n    // Init current user\n    HashBrown.Context.user = new HashBrown.Models.User(HashBrown.Context.user);\n\n    // Run init functions\n    initProjects();\n    initUsers();\n    initServer();\n});\n"],"sourceRoot":""}